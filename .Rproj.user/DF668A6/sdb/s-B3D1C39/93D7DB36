{
    "collab_server" : "",
    "contents" : "##########################\n#  FUNCTION MakeMPs\n#\n#  This function writes a single MP file for the wooly mammoth model\n#  Authors: Kevin Shoemaker and Damien Fordham\n# \n#  22 May 2015 -- started scripting\n#  11 June 2015 -- added dispersal correction\n#  30 June 2016 -- cleaned up for initiation of model runs \n##########################\n\n\n\n\n#############################\n#       GENERATE THE MP FILES: now parallelizable...\n#############################\n\nMakeMPfile <- function(f=1,masterDF=masterDF,NicheBreadth=40){\n    \n    ###########################################\n             ## BUILD THE MP FILES\n    # thisLine <- masterDF[] \n    # masterDF$filenames <- character(1)      \n    \n    # f=2\n    # for(f in 1:NREPS){\n    # filename <- sprintf(\"NicheBreadth%s_LHS_Sample%s.mp\",NicheBreadth,f)\n    filename <- as.character(masterDF$MPFilename[f])\n    \n       ## set up the new folder to store the MP file and associated KCH files... (specifies the niche breadth)\n    thisFolder <- sprintf(\"%s\\\\Sample_%s\\\\LHS_Sample%s\",MP_DIRECTORY,NicheBreadth,f)\n    if(is.na(file.info(thisFolder)[1,\"isdir\"])) dir.create(thisFolder,recursive = T)\n    \n    # masterDF$filenames[f] <- filename \n    \n       ### write out the KCH files for this model run (and get init abundances)   NOTE: KCH files are stored in the MP_DIRECTORY\n       # initabunds <- writeKCH(HSnum = masterDF$HS[f], density = masterDF$DENSITY[f],areas=GridCellAttributes$Area2)     ### NOTE: takes a long time to run, but doesn't use up much memory\n    initabunds <- writeKCH(toFolder=thisFolder,NicheBreadth=NicheBreadth,Filenum=masterDF$CUTS[f],density=masterDF$DENSITY[f])\n    \n       #### extract the main population arrays (to be edited)\n    poplist1 <- template$mp.file$PopList\n    poplist2 <- template$mp.file$PopData_df \n  \n    poplist2$KchangeSt <- as.character(poplist2$KchangeSt)   \n  \n    poplist2$UD1 <- round(masterDF$HARV[f],3)    # KTS: changed to \"HARV\" from \"HUNT\"\n    poplist2$UD2 <- 0.4  # KTS: this is the \"G\" parameter in the harvest function that is set to 0.4\n    poplist2$UD3 <- round(masterDF$HARVZ[f],3)   # KTS: this is the \"Z\" parameter in the harvest function\n    poplist2$UD4 <- 0    # this is the \"begin harvest year\" parameter\n    poplist2$UD5 <- masterDF$DENSITY[f]   # KTS: did I do this right?\n    \n    i=1\n    for(i in 1:NPOPS){\n  \n                # SET GROWTH RATE\n      poplist1[[i]]$MaxR <- round(masterDF$RMAX[f],3)   \n      poplist2$MaxR[i] <-  round(masterDF$RMAX[f],3)  \n  \n                # SET KCH FILE\n      KCHfilename <- sprintf(\"pop_%s.kch\",i)\n      poplist1[[i]]$KchangeSt <- KCHfilename\n      poplist2$KchangeSt[i] <-  KCHfilename\n   \n                # SET INIT ABUND\n      poplist1[[i]]$InitAbund <- round(initabunds[i])\n      poplist2$InitAbund[i] <- round(initabunds[i])\n    \n                # SET ALLEE EFFECT\n      poplist1[[i]]$localthr <- round(masterDF$ALLEE[f])\n      poplist2$localthr[i] <- round(masterDF$ALLEE[f])\n      \n      poplist1[[i]]$IncludeInSum <- TRUE\n      poplist2$IncludeInSum[i] <- TRUE\n      \n                # SET INIT HARVEST\n      mpstarttime <- template$mp.file$MaxDur*GENTIME\n      harvstarttime <- humanArrival.df$year_min[i] + masterDF$HUMAN[f]*(humanArrival.df$year_max[i]-humanArrival.df$year_min[i])\n      poplist2$UD4[i] <- round((mpstarttime - harvstarttime)/GENTIME) + 4  # KTS: added \"+4\" to make human effect have a time lag of 100 years i.e., 5 generations     # KTS: this is now \"UD4\"\n\n    }\n    \n  \n          # start the new mp file\n    version <- 60 #template$version\n    newmp <- template$mp.file\n    newmp$PopList <- poplist1\n    newmp$PopData_df <- poplist2\n  \n    newmp$UseDispDistFunc <- FALSE #TRUE    # now we need to use a dispersal matrix, unfortunately...  \n    newmp$UseCorrDistFunc <- TRUE\n    \n            # make sure env stoch is lognormal\n    newmp$Distrib <- \"Lognormal\"\n    \n            # set the Dll\n    newmp$DDforAllPop <- \"UD\"   # set to user-defined\n    newmp$UserDllFileName <- sprintf(\"%s\\\\%s\",EXE_DIRECTORY,DLL_FILENAME)   # TODO: change this? \n    \n            # SET DISPERSAL\n    params <- template$mp.file$DispDistFunc\n    params[1] <- masterDF$DISP1[f]/2                                # \"a\" parameter describes the proportion staying/leaving a given population\n    params[2] <- dispersalFunc.df$b[masterDF$dispndx[f]]            # \"b\" parameter describes the distance moved\n    params[4] <- dispersalFunc.df$Dmax[masterDF$dispndx[f]]         # \"Dmax\" parameter limits the maximum distance moved.\n    newmp$DispDistFunc <- round(params,3)\n  \n    # ensure that max dist is 95% quantile of dispersal kernel\n    # compute the dispersal at each distance bin. \n    # re-weight so that only X% leaves the focal population\n    # fill in the dispersal kernel.\n    \n    # b parameter and a parameter must be set so that 95% dispersal quantile at Dmax AND exactly Disp1 % of individs staying in the focal population\n    #  instead, just use the params from above, and spread out as necessary\n  \n    dispForDist <- DispersalKernelFunc(DistClasses[-1],params)\n    dispMatrix <- matrix(0,nrow=NPOPS,ncol=NPOPS) \n    dispForDist <- dispForDist[-which(dispForDist==0)]  \n    i=1\n    for(i in 1:NPOPS){\n      allIndices <- numeric(0) \n      dispRates <- numeric(0)\n      j=1\n      for(j in 1:length(dispForDist)){\n        if(!is.na(DistBins[[i]][[j]][1])){ \n          allIndices <- c(allIndices,DistBins[[i]][[j]])\n          dispRates <- c( dispRates,rep(dispForDist[j],times=length(DistBins[[i]][[j]])) )  \n        }\n      }\n      multiplier = params[1]/sum(dispRates)\n      dispRates = dispRates * multiplier   # ensure that total # leaving the population is held constant.\n         #  sum(dispRates)\n      dispMatrix[,i][allIndices] <- dispRates     \n    }\n    newmp$DispMatr <- round(dispMatrix,3)    # fill in the dispersal matrix.\n    \n  \n           # SET MANAGEMENT ACTIONS (HARVEST)  NOTE: this has changed!!! Now in DLL\n    \n    newmp$NPopManage <- NPOPS                                       # num of management (harvest) actions equals the number of populations\n  \n    newmp$NPopManage <- 0\n    \n    # harvestdf <- newmp$PopManageProp                   \n    # mpstarttime <- newmp$MaxDur*GENTIME                             # for translating between human arrival (ybp) and generations in the model\n    # \n    # i=1\n    # for(i in 1:NPOPS){\n    #   if(i!=1) harvestdf <- rbind(harvestdf,newmp$PopManageProp) \n    #   harvstarttime <- humanArrival.df$year_min[i] + masterDF$HUMAN[f]*(humanArrival.df$year_max[i]-humanArrival.df$year_min[i])\n    #   harvestdf$begin.time[i] <- round((mpstarttime - harvstarttime)/GENTIME)   # set start time for harvest\n    #   harvestdf$end.time[i] <- newmp$MaxDur\n    #   harvestdf$from.pop[i] <- i                                                # set population ID for management actions\n    #   harvestdf$to.pop[i] <- i\n    #   harvestdf$proportion <- round(masterDF$HUNT[f],5)                         # set proportion harvested\n    # }\n    # \n    # newmp$PopManageProp <- harvestdf                                # append all harvest-related parameters\n    # \n           # SET INIT ABUND (again)\n    newmp$StInit[,1] <- round(initabunds)                           # not sure which one is used, so set both at pop and global levels.\n  \n          # SET TEMP VAR\n    newmp$SDMatr[[1]]$Matr[1,1] <- round(masterDF$SD[f],3)                    # set temporal variability\n  \n    # time steps\n    newmp$MaxDur <- TIMESTEPS   \n    \n     # replicates\n    newmp$MaxRep <- 1\n    \n     # correlation (change from default, which is in km)\n    newmp$CorrDistFunc[2] <- 8\n    newmp$CorrDistFunc[1] <- 0.99 \n    \n  ###############\n        # write the new mp file\n    setwd(thisFolder)                                               \n    mp.write(newmp,version,filename)                   # write MP file\n     \n    #}     # close loops through scenarios\n    \n    \n      ### return something...\n    return(filename)\n    \n    #######################\n    #######################\n\n}\n\n\n# ##########################\n# ####           SAVE METADATA FOR EACH MP FILE TO FILE\n# \n# setwd(MP_DIRECTORY)\n# write.csv(masterDF,\"masterDF.csv\",row.names=F)\n\n",
    "created" : 1476733156751.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2637946208",
    "id" : "93D7DB36",
    "lastKnownWriteTime" : 1479272652,
    "last_content_update" : 1479272652866,
    "path" : "E:/GIT/paleo-models-sandbox/Rfunction_PALEO_MAKEMPs.R",
    "project_path" : "Rfunction_PALEO_MAKEMPs.R",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}