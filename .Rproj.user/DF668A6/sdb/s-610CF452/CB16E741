{
    "collab_server" : "",
    "contents" : "##########################\n# This script extracts results from a single MP file generated for the paleo project \n#  Authors: Kevin Shoemaker and Damien Fordham\n#\n# Summary: \n#  3 June 2015 -- started scripting\n#  15 June 2015 -- tested script, loaded to GitHub\n#  1 July 2016  -- modified for parallelization\n\n#TODO  \n##########################\n\n\n#########################################################################\n#  EXTRACT RESULTS FROM MP FILE\n#########################################################################\n# Response variables to record\n# Grid cell abundance over time    \n# Timing of grid cell extinction    \n# Population size over time              \n# Time of population level extinction\n# Sum cell occupancy over time\n# MCP over time (maybe save for later)\n\n\nExtractMPresults <- function(f=i,masterDF=masterDF,NicheBreadth=NicheBreadth){\n  \n  ## set up the new folder to store the MP file and associated KCH files... (specifies the niche breadth)\n  thisFolder <- sprintf(\"%s\\\\Sample_%s\\\\LHS_Sample%s\",MP_DIRECTORY,NicheBreadth,f)\n  \n  ############\n  # SET UP STORAGE STRUCTURES FOR KEY RESULTS METRICS\n  ############\n  SimInfo <- masterDF[f,]\n  SimInfo <- as.list(SimInfo)   # coerce to list \n  MPFilename <- as.character(SimInfo$MPFilename)\n  name <- gsub(x=MPFilename,pattern=\".mp\",replacement=\"\",fixed=T)\n  \n  \n  ## add field (matrix) for storing abundance over time for each grid cell\n  SimInfo$PopAbund <- matrix(0,nrow=NPOPS,ncol=TIMESTEPS)\n  \n  ## add field (vector) for storing the final occupied year for each grid cell\n  SimInfo$FinalYear <- numeric(NPOPS)\n  \n  ## add field (vector) for storing global abundance over time\n  SimInfo$TotAbund <- numeric(TIMESTEPS)\n  \n  ## add field (scalar) for storing the year of global extinction\n  SimInfo$ExtinctionYear <- 0\n  \n  ## add field (list) for storing MCP for each year\n  SimInfo$MCPs <- list() \n  \n  ## add field (vector) for storing total range area (MCP) over time\n  SimInfo$RangeArea <- numeric(TIMESTEPS)\n  \n  ##add field (scalar) for storing occupancy (number of occupied cells) over time\n  SimInfo$CellsOccupied <- numeric(TIMESTEPS)\n  \n  ## add field (scalar) for storing occupancy (number of occupied cells) over time\n  SimInfo$AreaOccupied <- numeric(TIMESTEPS)     \n  \n  ###########################\n  # GET RESULTS\n  ###########################\n  \n  ### step 1: set up the MP file connection \n  setwd(thisFolder)\n  MPcon <- file(MPFilename, 'r')\n  \n  # while loop: find the string \"Pop. 1\" [indicates the beginning of the population results]\n  stringToFind <- \"Pop. 1\"\n  basendx <- 0\n  CHUNKSIZE <- 1000\t\t\t\t      \n  while (length(input <- readLines(MPcon, n=CHUNKSIZE)) > 0){    # read in chunks until population results are found\n    \n    temp <- grep(stringToFind,input)\n    if(length(temp)>0){ \n      ndx <- basendx + temp\n      pushBack(input[(temp):CHUNKSIZE],MPcon)       # reset the file to where Pop. 1 began\n      break\n    } \n    basendx <- basendx + CHUNKSIZE\n    \n  }   # end while loop\n  \n  # read in the population abundances over time\n  for(pop in 1:NPOPS){\n    stringToFind <- sprintf(\"Pop. %s\",pop)\n    temp <- readLines(MPcon,1)\n    if(temp!=stringToFind){\n      print(paste(\"ERROR!\",\"Population #\",pop))\n      break\n    }\n    input <- readLines(MPcon, n=TIMESTEPS)\n    Nvec <- sapply( strsplit(input, \" \"), function(t) as.numeric(t[1]))\n    eval(parse(text=sprintf(\"SimInfo$PopAbund[%s,] <- Nvec\",pop)))\t   # RESULT: POP ABUNDANCE             \n  }   # end loop through pops \n  \n  #closeAllConnections()\n  \n  # RESULT: TOTAL ABUNDANCE\n  SimInfo$TotAbund <- apply(SimInfo$PopAbund,2,sum)\n  \n  # RESULT: GLOBAL EXTINCTION YEAR\n  SimInfo$ExtinctionYear <- NA\n  if(SimInfo$TotAbund[TIMESTEPS]<1) SimInfo$ExtinctionYear <- min(which(SimInfo$TotAbund==0))\n  \n  # RESULT: FINAL OCCUPIED CELL(s)\n  SimInfo$FinalOccCell <- NA\n  if(SimInfo$TotAbund[TIMESTEPS]<1){ \n    SimInfo$FinalOccCell <- which(SimInfo$PopAbund[,(SimInfo$ExtinctionYear-1)]>0)\n  }else{\n    SimInfo$FinalOccCell <- NA #which(SimInfo$PopAbund[,(TIMESTEPS-1)]>0)\n  }\n  \n  # RESULT: FINAL OCCUPIED YEAR FOR EACH POPULATION\n  SimInfo$FinalYear <- apply(SimInfo$PopAbund,1,function(t) ifelse(sum(t)>0,max(which(t>0)),NA))\n  \n  # GET XY coords of all occupied sites\n  occndx <- sapply(as.data.frame(SimInfo$PopAbund),function(t) which(t>1))  # indices of occupied populations for each year\n  proj <- CRS(\"+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs\")\n  t=1\n  for(t in 1:(SimInfo$ExtinctionYear-1)){\n    ndx <- occndx[[t]]\n    \n    # RESULT: MCP OVER TIME\n    \n    if(length(ndx)>=5){       # At least 5 relocations are required to fit an home range   \n      df <- data.frame(x=numeric(length(ndx)),y=0)\n      df$x <- GridCellAttributes$x.cord[ndx]        # x and y coordinates for all occupied grid cells\n      df$y <- GridCellAttributes$y.cord[ndx]\n      df <- SpatialPoints(df,proj4string=proj)\n      MCP <- mcp(df)\n      MCPpoly <- MCP@polygons[[1]]@Polygons[[1]]@coords\n      MCParea <- areaPolygon(MCPpoly)/1e6    # area of the MCP, in km2\n      SimInfo$MCPs[[t]] <- MCP            # store the MCP as SpatialPolygonsDataFrame object\n      SimInfo$RangeArea[t] <- MCParea     # store MCP area for each year of the simulation\n    }else{\n      SimInfo$MCPs[[t]] <- NA\n      SimInfo$RangeArea[t] <- NA\n    }\n    # RESULT: CELLS OCCUPIED OVER TIME\n    SimInfo$CellsOccupied[t] <- length(ndx)\n    \n    # RESULT: OCCUPIED AREA OVER TIME AND CELLS OCCUPIED OVER TIME\n    areaVec <-  GridCellAttributes$Area[ndx]\n    SimInfo$AreaOccupied[t] <- sum(GridCellAttributes$Area2[ndx])\n    \n  }\t\n  \n  SimInfo$PopAbund <- NULL   ## remove from memory\n  \n  ####################\n  # SAVE RESULTS TO HARD DISK AND REMOVE FROM RAM \n  ####################\n  setwd(thisFolder)\n  filename <- sprintf(\"%s.RData\",name)\n  eval(parse(text=sprintf(\"%s <- SimInfo\",name)))\n  eval(parse(text=sprintf(\"save(%s,file=filename)\",name)))   # save to disk\n  eval(parse(text=sprintf(\"rm(%s)\",name)))   # remove from memory   \n  \n  #}  # end loop through files...\n  \n  #closeAllConnections()\n  ### return something...\n  return(name)\n  \n}  # end function 'ExtractMPresults'   \n\n\n\n\n",
    "created" : 1476733188255.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4225375836",
    "id" : "CB16E741",
    "lastKnownWriteTime" : 1476839814,
    "last_content_update" : 1476839814371,
    "path" : "E:/GIT/paleo-models-sandbox/Rfunction_PALEO_EXTRACTRESULTS.R",
    "project_path" : "Rfunction_PALEO_EXTRACTRESULTS.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}