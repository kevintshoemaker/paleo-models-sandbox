points(xcords[nonzero],ycords[nonzero],pch=20,cex=0.01,col=cols[nonzero])
dev.off()
}
cmd_abundmov <- paste0("ffmpeg -f image2 -framerate 2 -i AbundanceMap_year%03d.tif -s 500x500 ",
sprintf("%s\\AbundanceMovie.avi",thisMOVIE_DIR)," -y")
cmd_abundmov
system(cmd_abundmov,ignore.stdout = T,ignore.stderr = T)
cmd_abundmov <- paste0("ffmpeg -f image2 -framerate 2 -i AbundanceMap_year%04d.tif -s 500x500 ",
sprintf("%s\\AbundanceMovie.avi",thisMOVIE_DIR)," -y")
cmd_abundmov <- paste0("ffmpeg -f image2 -framerate 1 -i AbundanceMap_year%04d.tif -s 500x500 ",
sprintf("%s\\AbundanceMovie.avi",thisMOVIE_DIR)," -y")
system(cmd_abundmov,ignore.stdout = T,ignore.stderr = T)
file = sprintf("AbundanceMap_year%04d.tif",t)
t = 1
file
t = 1
file = sprintf("AbundanceMap_year%04d.tif",t)
file
width = 800
height= 300
t = 1
for(t in seq(1,TIMESTEPS,4)){
file = sprintf("AbundanceMap_year%04d.tif",t)
tiff(file, width=width,height=height)
#colors <- c("red","orange","yellow","green","blue","purple","violet","black","black")
colors <- viridis::plasma(9)
cutoffs <- c(100000,10000,5000,2500,1000,500,100,10,0,-1)
#rownames(extinct) <-
xcords <- GridCellAttributes$x.cord
ycords <- GridCellAttributes$y.cord
head(extinct[,1:10])
if(any(xcords<0)) xcords[which(xcords<0)] <- 180+(180 - abs(xcords[which(xcords<0)]))
time<- rev(seq(from =0, to =80000, by = 25))
abundnow <- PopMat[,t]
abund.cols <- 10-as.numeric(cut(abundnow,cutoffs))
cols <- colors[abund.cols] #colorRamp(c("blue","red"), bias = 1, space = c("rgb"),
#         interpolate = c("linear"), alpha = FALSE)(exttime_scaled)
newmap <- getMap(resolution = "low")
plot(newmap,xlim = c(20, 200),
ylim = c(30, 80),
asp = 1,
main=sprintf("%s years bp",time[t])
)
nonzero <- abundnow>0
points(xcords[nonzero],ycords[nonzero],pch=20,cex=0.01,col=cols[nonzero])
dev.off()
}
cmd_abundmov <- paste0("ffmpeg -f image2 -framerate 2 -i AbundanceMap_year%04d.tif -s 500x500 ",
sprintf("%s\\AbundanceMovie.avi",thisMOVIE_DIR)," -y")
system(cmd_abundmov,ignore.stdout = T,ignore.stderr = T)
thisMOVIE_DIR
cmd_abundmov <- paste0("ffmpeg -f image2 -framerate 2 -i AbundanceMap_year%04d.tif -s 500x500 ",
sprintf("%s\\AbundanceMovie.avi",thisMOVIE_DIR)," -y")
system(cmd_abundmov,ignore.stdout = T,ignore.stderr = T)
system(cmd_abundmov
)
setwd(thisMOVIE_DIR)
width = 800
height= 300
t = 1
counter=1
for(t in seq(1,TIMESTEPS,4)){
file = sprintf("AbundanceMap_year%04d.tif",counter)
tiff(file, width=width,height=height)
#colors <- c("red","orange","yellow","green","blue","purple","violet","black","black")
colors <- viridis::plasma(9)
cutoffs <- c(100000,10000,5000,2500,1000,500,100,10,0,-1)
#rownames(extinct) <-
xcords <- GridCellAttributes$x.cord
ycords <- GridCellAttributes$y.cord
head(extinct[,1:10])
if(any(xcords<0)) xcords[which(xcords<0)] <- 180+(180 - abs(xcords[which(xcords<0)]))
time<- rev(seq(from =0, to =80000, by = 25))
abundnow <- PopMat[,t]
abund.cols <- 10-as.numeric(cut(abundnow,cutoffs))
cols <- colors[abund.cols] #colorRamp(c("blue","red"), bias = 1, space = c("rgb"),
#         interpolate = c("linear"), alpha = FALSE)(exttime_scaled)
newmap <- getMap(resolution = "low")
plot(newmap,xlim = c(20, 200),
ylim = c(30, 80),
asp = 1,
main=sprintf("%s years bp",time[t])
)
nonzero <- abundnow>0
points(xcords[nonzero],ycords[nonzero],pch=20,cex=0.01,col=cols[nonzero])
dev.off()
counter=counter+1
}
cmd_abundmov <- paste0("ffmpeg -f image2 -framerate 2 -i AbundanceMap_year%04d.tif -s 800x300 ",
sprintf("%s\\AbundanceMovie.avi",thisMOVIE_DIR)," -y")
#sink(tempfile())
system(cmd_abundmov,ignore.stdout = T,ignore.stderr = T)
library(abc)
library(raster)
#library(ggmap)
library(mapproj)
library(rworldmap)
library(abctools)    # for fancy calibration of the posterior - for later?
SIM_RESULTS_DIR
target = "extinct_pattern_wghtmean_sealevel_noNA.csv"
target = "extinct_pattern_wghtmean_sealevel_noNA.csv"
setwd(SIM_RESULTS_DIR)
target = "extinct_pattern_wghtmean_sealevel_noNA.csv"
setwd(SIM_RESULTS_DIR)
target = "extinct_pattern_wghtmean_sealevel_noNA.csv"
thisMOVIE_DIR <- sprintf("%s\\%s",getwd(),gsub("\\.mp","",target))
thisMOVIE_DIR
if(is.na(file.info(thisMOVIE_DIR)[1,"isdir"])) dir.create(thisMOVIE_DIR)
setwd(thisMOVIE_DIR)
fileyrs <- as.numeric(unlist(regmatches(list.files(), gregexpr("[[:digit:]]+", list.files()))))
fileyrs
thisMOVIE_DIR
thisMOVIE_DIR <- sprintf("%s\\%s",getwd(),gsub("\\.csv","",target))
thisMOVIE_DIR
if(is.na(file.info(thisMOVIE_DIR)[1,"isdir"])) dir.create(thisMOVIE_DIR)
setwd(thisMOVIE_DIR)
fileyrs <- as.numeric(unlist(regmatches(list.files(), gregexpr("[[:digit:]]+", list.files()))))
fileyrs
notthissim <- fileyrs > TIMESTEPS
toremove <- list.files()[notthissim]
any(notthissim)
if(any(notthissim)) file.remove(toremove)
width = 800
height= 300
setwd(SIM_RESULTS_DIR)
extdat <- read.csv("extinct_pattern_wghtmean_sealevel_noNA.csv")
extdat
extdat
thisMOVIE_DIR <- sprintf("%s\\%s",getwd(),gsub("\\.csv","",target))
if(is.na(file.info(thisMOVIE_DIR)[1,"isdir"])) dir.create(thisMOVIE_DIR)
setwd(thisMOVIE_DIR)
fileyrs <- as.numeric(unlist(regmatches(list.files(), gregexpr("[[:digit:]]+", list.files()))))
notthissim <- fileyrs > TIMESTEPS
toremove <- list.files()[notthissim]
if(any(notthissim)) file.remove(toremove)
width = 800
height= 300
t = 1
counter=1
file = sprintf("ExtinctionMap_year%04d.tif",counter)
colors <- viridis::plasma(9)
ncol(extdat)
nrow(extdat)
NPOPS
TIMESTEPS
max(extdat)
GENTIME
GENTIME*TIMESTEPS
PopMat[,1]
GridCellAttributes[,1]
length(GridCellAttributes[,1])
names(extdat)
grep("model",names(extdat))
ndx <- grep("model",names(extdat))
mean(extdat[,ndx])
apply(as.matrix(extdat[,ndx]),1,mean)
extdat$meanext <- round(apply(as.matrix(extdat[,ndx]),1,mean))
thisMOVIE_DIR <- sprintf("%s\\%s",getwd(),gsub("\\.csv","",target))
thisMOVIE_DIR
colors <- viridis::plasma(9)
xcords <- extdat$x
ycords <- extdat$y
head(extinct[,1:10])
any(xcords<0)
if(any(xcords<0)) xcords[which(xcords<0)] <- 180+(180 - abs(xcords[which(xcords<0)]))
newmap <- getMap(resolution = "low")
plot(newmap,xlim = c(20, 200),
ylim = c(30, 80),
asp = 1,
main=sprintf("%s years bp",time[t])
)
time<- rev(seq(from =0, to =80000, by = 100))
time
extinct <- extdat$meanext<time[t]
extinct
extant <- extdat$meanext<time[t]
cols <- c("green","red")[extant_vs_extinct]
extant_vs_extinct <- ifelse(extdat$meanext<time[t],1,2)
cols <- c("green","red")[extant_vs_extinct]
cols
points(xcords[nonzero],ycords[nonzero],pch=20,cex=0.01,col=cols[nonzero])
points(xcords,ycords,pch=20,cex=0.01,col=cols)
length(time)
time<- rev(seq(from =0, to =80000, by = 200))
t = 1
counter=1
length(time)
time<- rev(seq(from =0, to =80000, by = 500))
t = 1
counter=1
length(time)
time<- rev(seq(from =0, to =80000, by = 500))
t = 1
counter=1
for(t in 1:length(time)){
file = sprintf("ExtinctionMap_year%04d.tif",counter)
tiff(file, width=width,height=height)   # revert this later!
#colors <- c("red","orange","yellow","green","blue","purple","violet","black","black")
#colors <- viridis::plasma(9)
xcords <- extdat$x
ycords <- extdat$y
if(any(xcords<0)) xcords[which(xcords<0)] <- 180+(180 - abs(xcords[which(xcords<0)]))
newmap <- getMap(resolution = "low")
plot(newmap,xlim = c(20, 200),
ylim = c(30, 80),
asp = 1,
main=sprintf("%s years bp",time[t])
)
extant_vs_extinct <- ifelse(extdat$meanext<time[t],1,2)
cols <- c("green","red")[extant_vs_extinct]
points(xcords,ycords,pch=20,cex=0.01,col=cols)
dev.off()
counter=counter+1
}
cmd_abundmov <- paste0("ffmpeg -f image2 -framerate 2 -i ExtinctionMap_year%04d.tif -s 800x300 ",
sprintf("%s\\AbundanceMovie.avi",thisMOVIE_DIR)," -y")
cmd_abundmov
system(cmd_abundmov,ignore.stdout = T,ignore.stderr = T)
getwd()
thisMOVIE_DIR
cmd_abundmov <- paste0("ffmpeg -f image2 -framerate 2 -i ExtinctionMap_year%04d.tif -s 800x300 ",
sprintf("%s\\AbundanceMovie.avi",thisMOVIE_DIR)," -y")
system(cmd_abundmov,ignore.stdout = T,ignore.stderr = T)
cmd_abundmov <- paste0("ffmpeg -f image2 -framerate 2 -i ExtinctionMap_year%04d.tif -s 500x500 ",
sprintf("%s\\AbundanceMovie.avi",thisMOVIE_DIR)," -y")
system(cmd_abundmov,ignore.stdout = T,ignore.stderr = T)
thisMOVIE_DIR
cmd_abundmov <- paste0("ffmpeg -f image2 -framerate 2 -i ExtinctionMap_year%04d.tif -s 800x300 ",
sprintf("%s\\ExtinctionMovie.avi",getwd())," -y")
system(cmd_abundmov,ignore.stdout = T,ignore.stderr = T)
result = tryCatch({   ## catch errors!
### step 1: set up the MP file connection
MPcon <- file(target, 'r')
# while loop: find the string "Pop. 1" [indicates the beginning of the population results]
stringToFind <- "Pop. 1"
basendx <- 0
CHUNKSIZE <- 1000
while (length(input <- readLines(MPcon, n=CHUNKSIZE)) > 0){    # read in chunks until population results are found
temp <- grep(stringToFind,input)
if(length(temp)>0){
ndx <- basendx + temp
pushBack(input[(temp):CHUNKSIZE],MPcon)       # reset the file to where Pop. 1 began
break
}
basendx <- basendx + CHUNKSIZE
}   # end while loop
PopMat <- array(0,dim=c(NPOPS,TIMESTEPS))
# read in the population abundances over time
for(pop in 1:NPOPS){
stringToFind <- sprintf("Pop. %s",pop)
temp <- readLines(MPcon,1)
if(temp!=stringToFind){
print(paste("ERROR!","Population #",pop))
break
}
input <- readLines(MPcon, n=TIMESTEPS)
Nvec <- sapply( strsplit(input, " "), function(t) as.numeric(t[1]))
PopMat[pop,] <- Nvec     # RESULT: POP ABUNDANCE
}   # end loop through pops
if(isOpen(MPcon)){
close.connection(MPcon)
rm("MPcon")
}
if(exists("MPcon")){
rm("MPcon")
}
}, warning = function(w){
as.character(w)
}, error = function(e){
setwd(thisFolder)
filename <- sprintf("%s.RData",name)
eval(parse(text=sprintf("%s <- e",name)))
eval(parse(text=sprintf("save(%s,file=filename)",name)))   # save to disk
eval(parse(text=sprintf("rm(%s)",name)))   # remove from memory
as.character(e)
}, finally = {
if(exists("MPcon")){
close.connection(MPcon)
rm("MPcon")
}
})   # end tryCatch
return(PopMat)
}
result = tryCatch({   ## catch errors!
### step 1: set up the MP file connection
MPcon <- file(target, 'r')
# while loop: find the string "Pop. 1" [indicates the beginning of the population results]
stringToFind <- "Pop. 1"
basendx <- 0
CHUNKSIZE <- 1000
while (length(input <- readLines(MPcon, n=CHUNKSIZE)) > 0){    # read in chunks until population results are found
temp <- grep(stringToFind,input)
if(length(temp)>0){
ndx <- basendx + temp
pushBack(input[(temp):CHUNKSIZE],MPcon)       # reset the file to where Pop. 1 began
break
}
basendx <- basendx + CHUNKSIZE
}   # end while loop
PopMat <- array(0,dim=c(NPOPS,TIMESTEPS))
# read in the population abundances over time
for(pop in 1:NPOPS){
stringToFind <- sprintf("Pop. %s",pop)
temp <- readLines(MPcon,1)
if(temp!=stringToFind){
print(paste("ERROR!","Population #",pop))
break
}
input <- readLines(MPcon, n=TIMESTEPS)
Nvec <- sapply( strsplit(input, " "), function(t) as.numeric(t[1]))
PopMat[pop,] <- Nvec     # RESULT: POP ABUNDANCE
}   # end loop through pops
if(isOpen(MPcon)){
close.connection(MPcon)
rm("MPcon")
}
if(exists("MPcon")){
rm("MPcon")
}
}, warning = function(w){
as.character(w)
}, error = function(e){
setwd(thisFolder)
filename <- sprintf("%s.RData",name)
eval(parse(text=sprintf("%s <- e",name)))
eval(parse(text=sprintf("save(%s,file=filename)",name)))   # save to disk
eval(parse(text=sprintf("rm(%s)",name)))   # remove from memory
as.character(e)
}, finally = {
if(exists("MPcon")){
close.connection(MPcon)
rm("MPcon")
}
})   # end tryCatch
return(PopMat)
}
ExtractMPAbund <- function(target){    # target is the name of the MP file
setwd(SIM_RESULTS_DIR)
############
# SET UP STORAGE STRUCTURES FOR KEY RESULTS METRICS
############
###########################
# GET RESULTS
###########################
result = tryCatch({   ## catch errors!
### step 1: set up the MP file connection
MPcon <- file(target, 'r')
# while loop: find the string "Pop. 1" [indicates the beginning of the population results]
stringToFind <- "Pop. 1"
basendx <- 0
CHUNKSIZE <- 1000
while (length(input <- readLines(MPcon, n=CHUNKSIZE)) > 0){    # read in chunks until population results are found
temp <- grep(stringToFind,input)
if(length(temp)>0){
ndx <- basendx + temp
pushBack(input[(temp):CHUNKSIZE],MPcon)       # reset the file to where Pop. 1 began
break
}
basendx <- basendx + CHUNKSIZE
}   # end while loop
PopMat <- array(0,dim=c(NPOPS,TIMESTEPS))
# read in the population abundances over time
for(pop in 1:NPOPS){
stringToFind <- sprintf("Pop. %s",pop)
temp <- readLines(MPcon,1)
if(temp!=stringToFind){
print(paste("ERROR!","Population #",pop))
break
}
input <- readLines(MPcon, n=TIMESTEPS)
Nvec <- sapply( strsplit(input, " "), function(t) as.numeric(t[1]))
PopMat[pop,] <- Nvec     # RESULT: POP ABUNDANCE
}   # end loop through pops
if(isOpen(MPcon)){
close.connection(MPcon)
rm("MPcon")
}
if(exists("MPcon")){
rm("MPcon")
}
}, warning = function(w){
as.character(w)
}, error = function(e){
setwd(thisFolder)
filename <- sprintf("%s.RData",name)
eval(parse(text=sprintf("%s <- e",name)))
eval(parse(text=sprintf("save(%s,file=filename)",name)))   # save to disk
eval(parse(text=sprintf("rm(%s)",name)))   # remove from memory
as.character(e)
}, finally = {
if(exists("MPcon")){
close.connection(MPcon)
rm("MPcon")
}
})   # end tryCatch
return(PopMat)
}
g
target = "NicheBreadth70_LHS_Sample1.mp"
ExtractMPAbund(target)
Abund <- ExtractMPAbund(target)
str(Abund)
target = "extinct_pattern_wghtmean_sealevel_noNA.csv"
setwd(SIM_RESULTS_DIR)
extdat <- read.csv("extinct_pattern_wghtmean_sealevel_noNA.csv")
ndx <- grep("model",names(extdat))
names(extdat)
paste("model",targetmodel,sep="")
targetmodel=2
paste("model",targetmodel,sep="")
extdat2 <- extdat(,paste("model",targetmodel,sep=""))
extdat <- read.csv("extinct_pattern_wghtmean_sealevel_noNA.csv")
ndx <- grep("model",names(extdat))
targetmodel=2
extdat2 <- extdat(,paste("model",targetmodel,sep=""))
extdat2 <- extdat[,paste("model",targetmodel,sep="")]
extdat2
thisMOVIE_DIR <- sprintf("%s\\%s",getwd(),gsub("\\.csv","",target))
if(is.na(file.info(thisMOVIE_DIR)[1,"isdir"])) dir.create(thisMOVIE_DIR)
setwd(thisMOVIE_DIR)
fileyrs <- as.numeric(unlist(regmatches(list.files(), gregexpr("[[:digit:]]+", list.files()))))
notthissim <- fileyrs > TIMESTEPS
toremove <- list.files()[notthissim]
if(any(notthissim)) file.remove(toremove)
thisMOVIE_DIR
list.files()
gregexpr("[[:digit:]]+", list.files())
fileyrs <- as.numeric(unlist(regmatches(list.files(), gregexpr("[[:digit:]]+", list.files()))))
fileyrs
TIMESTEPS
fileyrs > TIMESTEPS
width = 800
height= 300
time<- rev(seq(from =0, to =80000, by = 500))
t = 1
counter=1
file = sprintf("ExtinctionMap_year%04d.tif",counter)
tiff(file, width=width,height=height)   # revert this later!
xcords <- extdat$x
ycords <- extdat$y
xcords <- extdat$x
ycords <- extdat$y
if(any(xcords<0)) xcords[which(xcords<0)] <- 180+(180 - abs(xcords[which(xcords<0)]))
newmap <- getMap(resolution = "low")
plot(newmap,xlim = c(20, 200),
ylim = c(30, 80),
asp = 1,
main=sprintf("%s years bp",time[t])
)
extant_vs_extinct <- ifelse(extdat2<time[t],1,2)
cols <- c("green","red")[extant_vs_extinct]
points(xcords,ycords,pch=20,cex=0.01,col=cols)
dev.off()
target = "extinct_pattern_wghtmean_sealevel_noNA.csv"
MakeMovie2 <- function(target){
setwd(SIM_RESULTS_DIR)
###########################
# READ DATA
###########################
extdat <- read.csv("extinct_pattern_wghtmean_sealevel_noNA.csv")
ndx <- grep("model",names(extdat))
targetmodel=2
extdat2 <- extdat[,paste("model",targetmodel,sep="")]
###########################
# SET UP DIRECTORY
###########################
thisMOVIE_DIR <- sprintf("%s\\%s",getwd(),gsub("\\.csv","",target))
if(is.na(file.info(thisMOVIE_DIR)[1,"isdir"])) dir.create(thisMOVIE_DIR)
setwd(thisMOVIE_DIR)
#### remove figures that are not part of this simulation?
fileyrs <- as.numeric(unlist(regmatches(list.files(), gregexpr("[[:digit:]]+", list.files()))))
notthissim <- fileyrs > TIMESTEPS
toremove <- list.files()[notthissim]
if(any(notthissim)) file.remove(toremove)
################
# MAKE PLOTS
width = 800
height= 300
time<- rev(seq(from =0, to =80000, by = 500))
t = 1
counter=1
for(t in 1:length(time)){
file = sprintf("ExtinctionMap_year%04d.tif",counter)
tiff(file, width=width,height=height)   # revert this later!
#colors <- c("red","orange","yellow","green","blue","purple","violet","black","black")
#colors <- viridis::plasma(9)
xcords <- extdat$x
ycords <- extdat$y
if(any(xcords<0)) xcords[which(xcords<0)] <- 180+(180 - abs(xcords[which(xcords<0)]))
newmap <- getMap(resolution = "low")
plot(newmap,xlim = c(20, 200),
ylim = c(30, 80),
asp = 1,
main=sprintf("%s years bp",time[t])
)
extant_vs_extinct <- ifelse(extdat2<time[t],1,2)
cols <- c("green","red")[extant_vs_extinct]
points(xcords,ycords,pch=20,cex=0.01,col=cols)
dev.off()
counter=counter+1
}
## NOTE: need command line like this: ffmpeg -f image2 -framerate 2 -i AbundanceMap_year%03d.tif -s 500x500 test.avi -y
# MAKING THE REAL MOVIE HERE! USE IMAGE MAGICK AND FFMPEG SOFTWARE  (https://blogazonia.wordpress.com/2016/01/19/making-a-movie-with-r/)
# create the movie
cmd_abundmov <- paste0("ffmpeg -f image2 -framerate 2 -i ExtinctionMap_year%04d.tif -s 800x300 ",
sprintf("%s\\ExtinctionMovie.avi",getwd())," -y")
#sink(tempfile())
system(cmd_abundmov,ignore.stdout = T,ignore.stderr = T)
#sink()
}  ### end function "MakeMovie"
target
MakeMovie2(target)
