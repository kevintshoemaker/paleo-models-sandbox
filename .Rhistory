newmp$NPopManage <- 0
# harvestdf <- newmp$PopManageProp
# mpstarttime <- newmp$MaxDur*GENTIME                             # for translating between human arrival (ybp) and generations in the model
#
# i=1
# for(i in 1:NPOPS){
#   if(i!=1) harvestdf <- rbind(harvestdf,newmp$PopManageProp)
#   harvstarttime <- humanArrival.df$year_min[i] + masterDF$HUMAN[f]*(humanArrival.df$year_max[i]-humanArrival.df$year_min[i])
#   harvestdf$begin.time[i] <- round((mpstarttime - harvstarttime)/GENTIME)   # set start time for harvest
#   harvestdf$end.time[i] <- newmp$MaxDur
#   harvestdf$from.pop[i] <- i                                                # set population ID for management actions
#   harvestdf$to.pop[i] <- i
#   harvestdf$proportion <- round(masterDF$HUNT[f],5)                         # set proportion harvested
# }
#
# newmp$PopManageProp <- harvestdf                                # append all harvest-related parameters
#
# SET INIT ABUND (again)
newmp$StInit[,1] <- round(initabunds)                           # not sure which one is used, so set both at pop and global levels.
# SET TEMP VAR
newmp$SDMatr[[1]]$Matr[1,1] <- round(masterDF$SD[f],3)                    # set temporal variability
# time steps
newmp$MaxDur <- TIMESTEPS
# replicates
newmp$MaxRep <- 1
# correlation (change from default, which is in km)
newmp$CorrDistFunc[2] <- 8
newmp$CorrDistFunc[1] <- 0.99
###############
# write the new mp file
setwd(thisFolder)
mp.write(newmp,version,filename)                   # write MP file
rm(list=ls())
KEVIN = FALSE # TRUE # FALSE  # TRUE
DAMIEN = FALSE
HRA_LAB = FALSE # TRUE
KEVIN_LAB = TRUE
NREPS <- 5     # number of samples to draw from the multivariate uniform prior (LHS) per niche breadth value
NicheBreadths = c(70)                         # NOTE: changed to loop through single NB for testing
if(KEVIN) CODE_DIRECTORY <- "C:\\Users\\Kevin\\GIT\\paleo-models-sandbox"       # code directory should be your local copy of the GitHub repository
if(HRA_LAB) CODE_DIRECTORY <- "C:\\Users\\Akcakaya\\Desktop\\Mammoth Model\\paleo-models-sandbox"
if(DAMIEN) CODE_DIRECTORY <-  "C:\\Users\\Damien Fordham\\Documents\\GitHub\\paleo-models-sandbox"
if(KEVIN_LAB) CODE_DIRECTORY <- "E:\\GIT\\paleo-models-sandbox"
setwd(CODE_DIRECTORY)
source("Rfunctions_PALEO_UTILITY.r")     # Load all functions for Paleo project
source("Rfunction_PALEO_MAKEMPs.r")
source("Rfunction_PALEO_RUNMPs.r")
source("Rfunction_PALEO_EXTRACTRESULTS.r")
SetUpWorkspace()   # function loads packages and sets up the workspace...
num_cores <- detectCores() - 1   # for setting up cluster... leave one core free for windows background processes?
DistBins <- DispersalPreCalculations()
template <- ReadMPTemplate()
nb=70  # for testing...
NicheBreadth <- nb   # set the current niche breadth
setwd(MP_DIRECTORY)
masterDF <- read.csv("masterDF.csv",header=T,stringsAsFactors = F)
masterDF
nb=70  # for testing...
masterDF <- masterDF[1:2,]
masterDF
registerDoParallel(cores=num_cores)    # make the cluster
functionlist <- c('mp.read', 'mp.write')
filelist <- c('MP_DIRECTORY','template','GENTIME','humanArrival.df','EXE_DIRECTORY','DLL_FILENAME',
'dispersalFunc.df','DistClasses','NPOPS','DistBins','masterDF','NicheBreadth')
objectlist <- c(functionlist,filelist)   # full list of objects to export
i=1
i
masterDF
NicheBreadth
f=i
filename <- as.character(masterDF$MPFilename[f])
thisFolder <- sprintf("%s\\Sample_%s\\LHS_Sample%s",MP_DIRECTORY,NicheBreadth,f)
if(is.na(file.info(thisFolder)[1,"isdir"])) dir.create(thisFolder,recursive = T)
initabunds <- writeKCH(toFolder=thisFolder,NicheBreadth=NicheBreadth,Filenum=masterDF$CUTS[f],density=masterDF$DENSITY[f])
poplist1 <- template$mp.file$PopList
poplist2 <- template$mp.file$PopData_df
poplist2$KchangeSt <- as.character(poplist2$KchangeSt)
poplist2$UD1 <- round(masterDF$HARV[f],3)    # KTS: changed to "HARV" from "HUNT"
poplist2$UD2 <- 0.4  # KTS: this is the "G" parameter in the harvest function that is set to 0.4
poplist2$UD3 <- round(masterDF$HARVZ[f],3)   # KTS: this is the "Z" parameter in the harvest function
poplist2$UD4 <- 0    # this is the "begin harvest year" parameter
poplist2$UD5 <- masterDF$DENSITY[f]   # KTS: did I do this right?
i=1
for(i in 1:NPOPS){
# SET GROWTH RATE
poplist1[[i]]$MaxR <- round(masterDF$RMAX[f],3)
poplist2$MaxR[i] <-  round(masterDF$RMAX[f],3)
# SET KCH FILE
KCHfilename <- sprintf("pop_%s.kch",i)
poplist1[[i]]$KchangeSt <- KCHfilename
poplist2$KchangeSt[i] <-  KCHfilename
# SET INIT ABUND
poplist1[[i]]$InitAbund <- round(initabunds[i])
poplist2$InitAbund[i] <- round(initabunds[i])
# SET ALLEE EFFECT
poplist1[[i]]$localthr <- round(masterDF$ALLEE[f])
poplist2$localthr[i] <- round(masterDF$ALLEE[f])
poplist1[[i]]$IncludeInSum <- TRUE
poplist2$IncludeInSum[i] <- TRUE
# SET INIT HARVEST
mpstarttime <- template$mp.file$MaxDur*GENTIME
harvstarttime <- humanArrival.df$year_min[i] + masterDF$HUMAN[f]*(humanArrival.df$year_max[i]-humanArrival.df$year_min[i])
poplist2$UD4[i] <- round((mpstarttime - harvstarttime)/GENTIME) + 4  # KTS: added "+4" to make human effect have a time lag of 100 years i.e., 5 generations     # KTS: this is now "UD4"
}
version <- 60 #template$version
newmp <- template$mp.file
newmp$PopList <- poplist1
newmp$PopData_df <- poplist2
newmp$UseDispDistFunc <- FALSE #TRUE    # now we need to use a dispersal matrix, unfortunately...
newmp$UseCorrDistFunc <- TRUE
newmp$Distrib <- "Lognormal"
newmp$DDforAllPop <- "UD"   # set to user-defined
newmp$UserDllFileName <- sprintf("%s\\%s",EXE_DIRECTORY,DLL_FILENAME)   # TODO: change this?
params <- template$mp.file$DispDistFunc
params[1] <- masterDF$DISP1[f]/2                                # "a" parameter describes the proportion staying/leaving a given population
params[2] <- dispersalFunc.df$b[masterDF$dispndx[f]]            # "b" parameter describes the distance moved
params[4] <- dispersalFunc.df$Dmax[masterDF$dispndx[f]]         # "Dmax" parameter limits the maximum distance moved.
newmp$DispDistFunc <- round(params,3)
dispForDist <- DispersalKernelFunc(DistClasses[-1],params)
dispMatrix <- matrix(0,nrow=NPOPS,ncol=NPOPS)
dispForDist <- dispForDist[-which(dispForDist==0)]
i=1
for(i in 1:NPOPS){
allIndices <- numeric(0)
dispRates <- numeric(0)
j=1
for(j in 1:length(dispForDist)){
if(!is.na(DistBins[[i]][[j]][1])){
allIndices <- c(allIndices,DistBins[[i]][[j]])
dispRates <- c( dispRates,rep(dispForDist[j],times=length(DistBins[[i]][[j]])) )
}
}
multiplier = params[1]/sum(dispRates)
dispRates = dispRates * multiplier   # ensure that total # leaving the population is held constant.
#  sum(dispRates)
dispMatrix[,i][allIndices] <- dispRates
}
newmp$DispMatr <- round(dispMatrix,3)    # fill in the dispersal matrix.
newmp$NPopManage <- NPOPS                                       # num of management (harvest) actions equals the number of populations
newmp$NPopManage <- 0
newmp$StInit[,1] <- round(initabunds)                           # not sure which one is used, so set both at pop and global levels.
newmp$SDMatr[[1]]$Matr[1,1] <- round(masterDF$SD[f],3)                    # set temporal variability
newmp$MaxDur <- TIMESTEPS
newmp$MaxRep <- 1
newmp$CorrDistFunc[2] <- 8
newmp$CorrDistFunc[1] <- 0.99
setwd(thisFolder)
newmp
version
filename
mp.write(newmp,version,filename)                   # write MP file
rm(list=ls())
#########################
#   PRELIMINARY: SET PROJECT DIRECTORIES
#########################
KEVIN = FALSE # TRUE # FALSE  # TRUE
DAMIEN = FALSE
HRA_LAB = FALSE # TRUE
KEVIN_LAB = TRUE
####################
#   PRELIMINARY: SET GLOBAL PARAMETERS  (USER SPECIFIED PARAMS)
####################
NREPS <- 2     # number of samples to draw from the multivariate uniform prior (LHS) per niche breadth value
##NicheBreadths = c(30,40,50,60,70,80,90,100)
NicheBreadths = c(70)                         # NOTE: changed to loop through single NB for testing
####################
#   PRELIMINARY: LOAD FUNCTIONS
####################
if(KEVIN) CODE_DIRECTORY <- "C:\\Users\\Kevin\\GIT\\paleo-models-sandbox"       # code directory should be your local copy of the GitHub repository
if(HRA_LAB) CODE_DIRECTORY <- "C:\\Users\\Akcakaya\\Desktop\\Mammoth Model\\paleo-models-sandbox"
if(DAMIEN) CODE_DIRECTORY <-  "C:\\Users\\Damien Fordham\\Documents\\GitHub\\paleo-models-sandbox"
if(KEVIN_LAB) CODE_DIRECTORY <- "E:\\GIT\\paleo-models-sandbox"
setwd(CODE_DIRECTORY)
source("Rfunctions_PALEO_UTILITY.r")     # Load all functions for Paleo project
source("Rfunction_PALEO_MAKEMPs.r")
source("Rfunction_PALEO_RUNMPs.r")
source("Rfunction_PALEO_EXTRACTRESULTS.r")
####################
#  PRELIMINARY: SET UP WORKSPACE AND LOAD PACKAGES
####################
SetUpWorkspace()   # function loads packages and sets up the workspace...
num_cores <- detectCores() - 1   # for setting up cluster... leave one core free for windows background processes?
####################
#  PRELIMINARY: DO DISPERSAL PRECALCULATIONS
#          for each cell, determine which neighboring cells are in each distance bin...
####################
DistBins <- DispersalPreCalculations()
#####################
#  READ THE MP TEMPLATE FOR BUILDING MORE MP FILES
template <- ReadMPTemplate()
#############################
#       STEP 1. GENERATE THE MP FILES (parallel)
#############################
nb=70
registerDoParallel(cores=num_cores)    # make the cluster
#######################
## objects to export to each node in the cluster
functionlist <- c('mp.read', 'mp.write')
filelist <- c('MP_DIRECTORY','template','GENTIME','humanArrival.df','EXE_DIRECTORY','DLL_FILENAME',
'dispersalFunc.df','DistClasses','NPOPS','DistBins','masterDF','NicheBreadth')
objectlist <- c(functionlist,filelist)   # full list of objects to export
#packagelist <- c()
nrow(masterDF)
dir <- sprintf("%s\\Sample_%s",KCH_DIRECTORY,nb)
if(nb==NicheBreadths[1]){
masterDF <- MakeLHSSamples(nicheBreadthDir=dir,NicheBreadth)
} else{
masterDF <- rbind(masterDF,MakeLHSSamples(dir,nb))
}
masterDF
dir <- sprintf("%s\\Sample_%s",KCH_DIRECTORY,nb)
KCH_DIRECTORY
NicheBreadth <- nb   # set the current niche breadth
dir <- sprintf("%s\\Sample_%s",KCH_DIRECTORY,nb)
if(nb==NicheBreadths[1]){
masterDF <- MakeLHSSamples(nicheBreadthDir=dir,NicheBreadth)
} else{
masterDF <- rbind(masterDF,MakeLHSSamples(dir,nb))
}
registerDoParallel(cores=num_cores)    # make the cluster
masterDF
functionlist <- c('mp.read', 'mp.write')
filelist <- c('MP_DIRECTORY','template','GENTIME','humanArrival.df','EXE_DIRECTORY','DLL_FILENAME',
'dispersalFunc.df','DistClasses','NPOPS','DistBins','masterDF','NicheBreadth')
objectlist <- c(functionlist,filelist)   # full list of objects to export
#packagelist <- c()
all.mps <- foreach(i = 1:nrow(masterDF),
.export=objectlist,
#.packages = c("R2WinBUGS"),
.errorhandling=c("pass")
) %dopar% {
MakeMPfile(f=i,masterDF=masterDF,NicheBreadth=NicheBreadth)
}
nb
i=1
NicheBreadth
masterDF
f=i
masterDF=masterDF
# thisLine <- masterDF[]
# masterDF$filenames <- character(1)
# f=2
# for(f in 1:NREPS){
# filename <- sprintf("NicheBreadth%s_LHS_Sample%s.mp",NicheBreadth,f)
filename <- as.character(masterDF$MPFilename[f])
## set up the new folder to store the MP file and associated KCH files... (specifies the niche breadth)
thisFolder <- sprintf("%s\\Sample_%s\\LHS_Sample%s",MP_DIRECTORY,NicheBreadth,f)
if(is.na(file.info(thisFolder)[1,"isdir"])) dir.create(thisFolder,recursive = T)
# masterDF$filenames[f] <- filename
### write out the KCH files for this model run (and get init abundances)   NOTE: KCH files are stored in the MP_DIRECTORY
# initabunds <- writeKCH(HSnum = masterDF$HS[f], density = masterDF$DENSITY[f],areas=GridCellAttributes$Area2)     ### NOTE: takes a long time to run, but doesn't use up much memory
initabunds <- writeKCH(toFolder=thisFolder,NicheBreadth=NicheBreadth,Filenum=masterDF$CUTS[f],density=masterDF$DENSITY[f])
#### extract the main population arrays (to be edited)
poplist1 <- template$mp.file$PopList
poplist2 <- template$mp.file$PopData_df
poplist2$KchangeSt <- as.character(poplist2$KchangeSt)
poplist2$UD1 <- round(masterDF$HARV[f],3)    # KTS: changed to "HARV" from "HUNT"
poplist2$UD2 <- 0.4  # KTS: this is the "G" parameter in the harvest function that is set to 0.4
poplist2$UD3 <- round(masterDF$HARVZ[f],3)   # KTS: this is the "Z" parameter in the harvest function
poplist2$UD4 <- 0    # this is the "begin harvest year" parameter
poplist2$UD5 <- masterDF$DENSITY[f]   # KTS: did I do this right?
i=1
for(i in 1:NPOPS){
# SET GROWTH RATE
poplist1[[i]]$MaxR <- round(masterDF$RMAX[f],3)
poplist2$MaxR[i] <-  round(masterDF$RMAX[f],3)
# SET KCH FILE
KCHfilename <- sprintf("pop_%s.kch",i)
poplist1[[i]]$KchangeSt <- KCHfilename
poplist2$KchangeSt[i] <-  KCHfilename
# SET INIT ABUND
poplist1[[i]]$InitAbund <- round(initabunds[i])
poplist2$InitAbund[i] <- round(initabunds[i])
# SET ALLEE EFFECT
poplist1[[i]]$localthr <- round(masterDF$ALLEE[f])
poplist2$localthr[i] <- round(masterDF$ALLEE[f])
poplist1[[i]]$IncludeInSum <- TRUE
poplist2$IncludeInSum[i] <- TRUE
# SET INIT HARVEST
mpstarttime <- template$mp.file$MaxDur*GENTIME
harvstarttime <- humanArrival.df$year_min[i] + masterDF$HUMAN[f]*(humanArrival.df$year_max[i]-humanArrival.df$year_min[i])
poplist2$UD4[i] <- round((mpstarttime - harvstarttime)/GENTIME) + 4  # KTS: added "+4" to make human effect have a time lag of 100 years i.e., 5 generations     # KTS: this is now "UD4"
}
# start the new mp file
version <- 60 #template$version
newmp <- template$mp.file
newmp$PopList <- poplist1
newmp$PopData_df <- poplist2
newmp$UseDispDistFunc <- FALSE #TRUE    # now we need to use a dispersal matrix, unfortunately...
newmp$UseCorrDistFunc <- TRUE
# make sure env stoch is lognormal
newmp$Distrib <- "Lognormal"
# set the Dll
newmp$DDforAllPop <- "UD"   # set to user-defined
newmp$UserDllFileName <- sprintf("%s\\%s",EXE_DIRECTORY,DLL_FILENAME)   # TODO: change this?
# SET DISPERSAL
params <- template$mp.file$DispDistFunc
params[1] <- masterDF$DISP1[f]/2                                # "a" parameter describes the proportion staying/leaving a given population
params[2] <- dispersalFunc.df$b[masterDF$dispndx[f]]            # "b" parameter describes the distance moved
params[4] <- dispersalFunc.df$Dmax[masterDF$dispndx[f]]         # "Dmax" parameter limits the maximum distance moved.
newmp$DispDistFunc <- round(params,3)
# ensure that max dist is 95% quantile of dispersal kernel
# compute the dispersal at each distance bin.
# re-weight so that only X% leaves the focal population
# fill in the dispersal kernel.
# b parameter and a parameter must be set so that 95% dispersal quantile at Dmax AND exactly Disp1 % of individs staying in the focal population
#  instead, just use the params from above, and spread out as necessary
dispForDist <- DispersalKernelFunc(DistClasses[-1],params)
dispMatrix <- matrix(0,nrow=NPOPS,ncol=NPOPS)
dispForDist <- dispForDist[-which(dispForDist==0)]
i=1
for(i in 1:NPOPS){
allIndices <- numeric(0)
dispRates <- numeric(0)
j=1
for(j in 1:length(dispForDist)){
if(!is.na(DistBins[[i]][[j]][1])){
allIndices <- c(allIndices,DistBins[[i]][[j]])
dispRates <- c( dispRates,rep(dispForDist[j],times=length(DistBins[[i]][[j]])) )
}
}
multiplier = params[1]/sum(dispRates)
dispRates = dispRates * multiplier   # ensure that total # leaving the population is held constant.
#  sum(dispRates)
dispMatrix[,i][allIndices] <- dispRates
}
newmp$DispMatr <- round(dispMatrix,3)    # fill in the dispersal matrix.
# SET MANAGEMENT ACTIONS (HARVEST)  NOTE: this has changed!!! Now in DLL
newmp$NPopManage <- NPOPS                                       # num of management (harvest) actions equals the number of populations
newmp$NPopManage <- 0
# harvestdf <- newmp$PopManageProp
# mpstarttime <- newmp$MaxDur*GENTIME                             # for translating between human arrival (ybp) and generations in the model
#
# i=1
# for(i in 1:NPOPS){
#   if(i!=1) harvestdf <- rbind(harvestdf,newmp$PopManageProp)
#   harvstarttime <- humanArrival.df$year_min[i] + masterDF$HUMAN[f]*(humanArrival.df$year_max[i]-humanArrival.df$year_min[i])
#   harvestdf$begin.time[i] <- round((mpstarttime - harvstarttime)/GENTIME)   # set start time for harvest
#   harvestdf$end.time[i] <- newmp$MaxDur
#   harvestdf$from.pop[i] <- i                                                # set population ID for management actions
#   harvestdf$to.pop[i] <- i
#   harvestdf$proportion <- round(masterDF$HUNT[f],5)                         # set proportion harvested
# }
#
# newmp$PopManageProp <- harvestdf                                # append all harvest-related parameters
#
# SET INIT ABUND (again)
newmp$StInit[,1] <- round(initabunds)                           # not sure which one is used, so set both at pop and global levels.
# SET TEMP VAR
newmp$SDMatr[[1]]$Matr[1,1] <- round(masterDF$SD[f],3)                    # set temporal variability
# time steps
newmp$MaxDur <- TIMESTEPS
# replicates
newmp$MaxRep <- 1
# correlation (change from default, which is in km)
newmp$CorrDistFunc[2] <- 8
newmp$CorrDistFunc[1] <- 0.99
###############
# write the new mp file
setwd(thisFolder)
mp.write(newmp,version,filename)                   # write MP file
i=2
f=i
masterDF=masterDF
NicheBreadth=NicheBreadth
f=i
masterDF=masterDF
NicheBreadth=NicheBreadth
## BUILD THE MP FILES
# thisLine <- masterDF[]
# masterDF$filenames <- character(1)
# f=2
# for(f in 1:NREPS){
# filename <- sprintf("NicheBreadth%s_LHS_Sample%s.mp",NicheBreadth,f)
filename <- as.character(masterDF$MPFilename[f])
## set up the new folder to store the MP file and associated KCH files... (specifies the niche breadth)
thisFolder <- sprintf("%s\\Sample_%s\\LHS_Sample%s",MP_DIRECTORY,NicheBreadth,f)
if(is.na(file.info(thisFolder)[1,"isdir"])) dir.create(thisFolder,recursive = T)
# masterDF$filenames[f] <- filename
### write out the KCH files for this model run (and get init abundances)   NOTE: KCH files are stored in the MP_DIRECTORY
# initabunds <- writeKCH(HSnum = masterDF$HS[f], density = masterDF$DENSITY[f],areas=GridCellAttributes$Area2)     ### NOTE: takes a long time to run, but doesn't use up much memory
initabunds <- writeKCH(toFolder=thisFolder,NicheBreadth=NicheBreadth,Filenum=masterDF$CUTS[f],density=masterDF$DENSITY[f])
#### extract the main population arrays (to be edited)
poplist1 <- template$mp.file$PopList
poplist2 <- template$mp.file$PopData_df
poplist2$KchangeSt <- as.character(poplist2$KchangeSt)
poplist2$UD1 <- round(masterDF$HARV[f],3)    # KTS: changed to "HARV" from "HUNT"
poplist2$UD2 <- 0.4  # KTS: this is the "G" parameter in the harvest function that is set to 0.4
poplist2$UD3 <- round(masterDF$HARVZ[f],3)   # KTS: this is the "Z" parameter in the harvest function
poplist2$UD4 <- 0    # this is the "begin harvest year" parameter
poplist2$UD5 <- masterDF$DENSITY[f]   # KTS: did I do this right?
i=1
for(i in 1:NPOPS){
# SET GROWTH RATE
poplist1[[i]]$MaxR <- round(masterDF$RMAX[f],3)
poplist2$MaxR[i] <-  round(masterDF$RMAX[f],3)
# SET KCH FILE
KCHfilename <- sprintf("pop_%s.kch",i)
poplist1[[i]]$KchangeSt <- KCHfilename
poplist2$KchangeSt[i] <-  KCHfilename
# SET INIT ABUND
poplist1[[i]]$InitAbund <- round(initabunds[i])
poplist2$InitAbund[i] <- round(initabunds[i])
# SET ALLEE EFFECT
poplist1[[i]]$localthr <- round(masterDF$ALLEE[f])
poplist2$localthr[i] <- round(masterDF$ALLEE[f])
poplist1[[i]]$IncludeInSum <- TRUE
poplist2$IncludeInSum[i] <- TRUE
# SET INIT HARVEST
mpstarttime <- template$mp.file$MaxDur*GENTIME
harvstarttime <- humanArrival.df$year_min[i] + masterDF$HUMAN[f]*(humanArrival.df$year_max[i]-humanArrival.df$year_min[i])
poplist2$UD4[i] <- round((mpstarttime - harvstarttime)/GENTIME) + 4  # KTS: added "+4" to make human effect have a time lag of 100 years i.e., 5 generations     # KTS: this is now "UD4"
}
# start the new mp file
version <- 60 #template$version
newmp <- template$mp.file
newmp$PopList <- poplist1
newmp$PopData_df <- poplist2
newmp$UseDispDistFunc <- FALSE #TRUE    # now we need to use a dispersal matrix, unfortunately...
newmp$UseCorrDistFunc <- TRUE
# make sure env stoch is lognormal
newmp$Distrib <- "Lognormal"
# set the Dll
newmp$DDforAllPop <- "UD"   # set to user-defined
newmp$UserDllFileName <- sprintf("%s\\%s",EXE_DIRECTORY,DLL_FILENAME)   # TODO: change this?
# SET DISPERSAL
params <- template$mp.file$DispDistFunc
params[1] <- masterDF$DISP1[f]/2                                # "a" parameter describes the proportion staying/leaving a given population
params[2] <- dispersalFunc.df$b[masterDF$dispndx[f]]            # "b" parameter describes the distance moved
params[4] <- dispersalFunc.df$Dmax[masterDF$dispndx[f]]         # "Dmax" parameter limits the maximum distance moved.
newmp$DispDistFunc <- round(params,3)
# ensure that max dist is 95% quantile of dispersal kernel
# compute the dispersal at each distance bin.
# re-weight so that only X% leaves the focal population
# fill in the dispersal kernel.
# b parameter and a parameter must be set so that 95% dispersal quantile at Dmax AND exactly Disp1 % of individs staying in the focal population
#  instead, just use the params from above, and spread out as necessary
dispForDist <- DispersalKernelFunc(DistClasses[-1],params)
dispMatrix <- matrix(0,nrow=NPOPS,ncol=NPOPS)
dispForDist <- dispForDist[-which(dispForDist==0)]
i=1
for(i in 1:NPOPS){
allIndices <- numeric(0)
dispRates <- numeric(0)
j=1
for(j in 1:length(dispForDist)){
if(!is.na(DistBins[[i]][[j]][1])){
allIndices <- c(allIndices,DistBins[[i]][[j]])
dispRates <- c( dispRates,rep(dispForDist[j],times=length(DistBins[[i]][[j]])) )
}
}
multiplier = params[1]/sum(dispRates)
dispRates = dispRates * multiplier   # ensure that total # leaving the population is held constant.
#  sum(dispRates)
dispMatrix[,i][allIndices] <- dispRates
}
newmp$DispMatr <- round(dispMatrix,3)    # fill in the dispersal matrix.
# SET MANAGEMENT ACTIONS (HARVEST)  NOTE: this has changed!!! Now in DLL
newmp$NPopManage <- NPOPS                                       # num of management (harvest) actions equals the number of populations
newmp$NPopManage <- 0
# harvestdf <- newmp$PopManageProp
# mpstarttime <- newmp$MaxDur*GENTIME                             # for translating between human arrival (ybp) and generations in the model
#
# i=1
# for(i in 1:NPOPS){
#   if(i!=1) harvestdf <- rbind(harvestdf,newmp$PopManageProp)
#   harvstarttime <- humanArrival.df$year_min[i] + masterDF$HUMAN[f]*(humanArrival.df$year_max[i]-humanArrival.df$year_min[i])
#   harvestdf$begin.time[i] <- round((mpstarttime - harvstarttime)/GENTIME)   # set start time for harvest
#   harvestdf$end.time[i] <- newmp$MaxDur
#   harvestdf$from.pop[i] <- i                                                # set population ID for management actions
#   harvestdf$to.pop[i] <- i
#   harvestdf$proportion <- round(masterDF$HUNT[f],5)                         # set proportion harvested
# }
#
# newmp$PopManageProp <- harvestdf                                # append all harvest-related parameters
#
# SET INIT ABUND (again)
newmp$StInit[,1] <- round(initabunds)                           # not sure which one is used, so set both at pop and global levels.
# SET TEMP VAR
newmp$SDMatr[[1]]$Matr[1,1] <- round(masterDF$SD[f],3)                    # set temporal variability
# time steps
newmp$MaxDur <- TIMESTEPS
# replicates
newmp$MaxRep <- 1
# correlation (change from default, which is in km)
newmp$CorrDistFunc[2] <- 8
newmp$CorrDistFunc[1] <- 0.99
###############
# write the new mp file
setwd(thisFolder)
mp.write(newmp,version,filename)
NicheBreadth
KCH_DIRECTORY
writeKCH
f
filename <- as.character(masterDF$MPFilename[f])
thisFolder <- sprintf("%s\\Sample_%s\\LHS_Sample%s",MP_DIRECTORY,NicheBreadth,f)
if(is.na(file.info(thisFolder)[1,"isdir"])) dir.create(thisFolder,recursive = T)
initabunds <- writeKCH(toFolder=thisFolder,NicheBreadth=NicheBreadth,Filenum=masterDF$CUTS[f],density=masterDF$DENSITY[f])
thisFolder
NicheBreadth
masterDF$CUTS[f]
masterDF$DENSITY[f]
filename <- as.character(masterDF$MPFilename[f])
toFolder=thisFolder
Filenum=masterDF$CUTS[f]
density=masterDF$DENSITY[f]
toFolder=thisFolder
initabund <- numeric(NPOPS)
directoryname = sprintf("%s\\Sample_%s\\file_%s",KCH_DIRECTORY,NicheBreadth,Filenum)
setwd(directoryname)
directoryname
